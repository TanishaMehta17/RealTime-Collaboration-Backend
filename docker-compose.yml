# version: '3.8'

# services:
#   # Redis Service
#   redis:
#     image: redis:latest
#     container_name: redis-local
#     ports:
#       - "6379:6379"
#     restart: always

#   # Zookeeper (Required for Kafka)
#   zookeeper:
#     image: confluentinc/cp-zookeeper:latest
#     container_name: zookeeper
#     environment:
#       ZOOKEEPER_CLIENT_PORT: 2181
#       ZOOKEEPER_TICK_TIME: 2000
#     ports:
#       - "2181:2181"

#   # Kafka Broker
#   kafka:
#     image: confluentinc/cp-kafka:latest
#     container_name: kafka-local
#     depends_on:
#       - zookeeper
#     ports:
#       - "9092:9092"
#     environment:
#       KAFKA_BROKER_ID: 1
#       KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#       KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

#   # Kafka UI (Optional - Web UI for Kafka)
#   kafka-ui:
#     image: provectuslabs/kafka-ui:latest
#     container_name: kafka-ui
#     depends_on:
#       - kafka
#     ports:
#       - "8080:8080"
#     environment:
#       KAFKA_CLUSTERS_0_NAME: local
#       KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:9092
#       KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

# networks:
#   default:
#     driver: bridge
# version: '3.8'

# services:
#   # Redis Service
#   redis:
#     image: redis:latest
#     container_name: redis-local
#     ports:
#       - "6379:6379"
#     restart: always

#   # Zookeeper (Required for Kafka)
#   zookeeper:
#     image: confluentinc/cp-zookeeper:latest
#     container_name: zookeeper
#     environment:
#       ZOOKEEPER_CLIENT_PORT: 2181
#       ZOOKEEPER_TICK_TIME: 2000
#     ports:
#       - "2181:2181"

#   # Kafka Broker
#   kafka:
#     image: confluentinc/cp-kafka:latest
#     container_name: kafka-local
#     depends_on:
#       - zookeeper
#     ports:
#       - "9092:9092"
#     environment:
#       KAFKA_BROKER_ID: 1
#       KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#       KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

#   # Kafka UI (Optional - Web UI for Kafka)
#   kafka-ui:
#     image: provectuslabs/kafka-ui:latest
#     container_name: kafka-ui
#     depends_on:
#       - kafka
#     ports:
#       - "8080:8080"
#     environment:
#       KAFKA_CLUSTERS_0_NAME: local
#       KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:9092
#       KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

#   # Backend API Service
#   backend:
#     build: .
#     container_name: backend-api
#     ports:
#       - "3000:3000"  # Expose the API to host machine
#     depends_on:
#       - redis
#       - kafka
#     environment:
#       NODE_ENV: development
#       PORT: 3000
#     networks:
#       - default

# networks:
#   default:
#     driver: bridge

version: '3.8'

services:
  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-local
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      retries: 5

  # Kafka UI (Optional - Web UI for Kafka)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8081:8080"  # Changed to avoid conflicts
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  # Redis
  redis:
    image: redis:latest
    container_name: redis-server
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5

  # Prisma Migration Service
  prisma_migrate:
    image: node:18
    container_name: prisma_migrate
    working_dir: /app
    volumes:
      - .:/app
    command: >
      sh -c "npm install && npx prisma migrate deploy"
    env_file:
      - .env

  # Backend API Service
  backend:
    build: .
    container_name: backend-api
    ports:
      - "3000:3000"  # Expose the API to host machine
    depends_on:
      prisma_migrate:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - default

networks:
  default:
    driver: bridge
